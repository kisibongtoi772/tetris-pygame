import logging
from kafka_producer import TetrisKafkaProducer


class GestureController:
    """
    Dispatch Tetris game commands based on detected gestures.

    Gestures:
      - accelerate:   cross‐hand
      - slow_down:    raised clenched fist
      - pause:        hand palm facing camera
    """

    def __init__(self,
                 producer: TetrisKafkaProducer = None,
                 topic: str = 'tetris-commands',
                 servers: list = None) -> None:
        """
        Initialize the controller with a Kafka producer.

        :param producer:  existing TetrisKafkaProducer instance,
                          or None to create a new one
        :param topic:     Kafka topic to publish commands on
        :param servers:   list of bootstrap servers (e.g. ['localhost:9092'])
        """
        # set up logging
        self.logger = logging.getLogger(self.__class__.__name__)
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        )

        # create or attach producer
        if producer is None:
            servers = servers or ['localhost:9092']
            self.producer = TetrisKafkaProducer(
                bootstrap_servers=servers,
                topic=topic
            )
        else:
            self.producer = producer

    def accelerate(self) -> None:
        """Increase the piece drop speed."""
        try:
            self.producer.send_command('accelerate')
            self.logger.info("Sent accelerate command.")
        except Exception as e:
            self.logger.error(f"Could not send accelerate: {e}")

    def slow_down(self) -> None:
        """Decrease the piece drop speed."""
        try:
            self.producer.send_command('slow_down')
            self.logger.info("Sent slow_down command.")
        except Exception as e:
            self.logger.error(f"Could not send slow_down: {e}")

    def pause(self) -> None:
        """Pause or resume the game."""
        try:
            self.producer.send_command('pause')
            self.logger.info("Sent pause command.")
        except Exception as e:
            self.logger.error(f"Could not send pause: {e}")


if __name__ == '__main__':
    # Example usage: call these methods when your gesture logic fires.
    controller = GestureController()

    # Simulate gesture detection callbacks:
    controller.accelerate()   # e.g. cross‐hand detected
    controller.slow_down()    # e.g. fist detected
    controller.pause()        # e.g. palm detected
